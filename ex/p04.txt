#######
Exercise: Filesystem ACLs

1. Create a second user on the system called "starbuck".  Open a second terminal window for the lab server, and connect as the user starbuck. Ensure you're working as a priviledged user (sudo) or root user while perofrming the lab. The starbuck user will be used to test setting the permissions.

[root@localhost ~]# useradd starbuck; passwd starbuck
Changing password for user starbuck.
New password: 
Retype new password: 
passwd: all authentication tokens updated successfully.

2. Navigate into the /tmp directory, create two new directories named "dir1" and "dir2" and two files called "file1" and "file2".

[root@localhost tmp]# mkdir {dir1,dir2}; touch {file1,file2}

3. Idenity if any of the files currently have extended access control lists associated with them.

[root@localhost tmp]# ls -l
total 0
drwxr-xr-x. 2 root root 6 May  5 20:00 dir1
drwxr-xr-x. 2 root root 6 May  5 20:00 dir2
-rw-r--r--. 1 root root 0 May  5 20:00 file1
-rw-r--r--. 1 root root 0 May  5 20:00 file2

Note: The files have base ACLs but do not have extended ACLs. We know they do not have extended ACLs because of the lacl of "+" at the end of the permissions listed.

4. Set an ACL for the starbuck user to read and write for file1.

[root@localhost tmp]# setfacl -m u:starbuck:rw file1
[root@localhost tmp]# getfacl file1
# file: file1
# owner: root
# group: root
user::rw-
user:starbuck:rw-
group::r--
mask::rw-
other::r--

5. Set the mask on the file1 to read only, then as the starbuck user, attempt to execute the following command: echo "test" > /tmp/file1. Why does this fail?

Root's Terminal

[root@localhost tmp]# setfacl -m m::r file1
[root@localhost tmp]# getfacl file1
# file: file1
# owner: root
# group: root
user::rw-
user:starbuck:rw- #effective:r--
group::r--
mask::r--
other::r--

Starbuck's Terminal

[starbuck@localhost tmp]$ echo "test "> /tmp/file1
-bash: /tmp/file1: Permission denied

Summary: Starbuck was unable to write to file1 even though they had an ACL with rw, because the mask was setting the "maximum" permissions to r and was masking w.

6. Set the default permissions on dir1 to read, write and execute for the starbuck user; execute only if it is a directory.

[root@localhost tmp]# setfacl -d -m u:starbuck:rwX dir1
[root@localhost tmp]# getfacl dir1
# file: dir1
# owner: root
# group: root
user::rwx
group::r-x
other::r-x
default:user::rwx
default:user:starbuck:rwx
default:group::r-x
default:mask::rwx
default:other::r-x

7. Using setfacl, change the "other" permissions to none on file1.

[root@localhost tmp]# setfacl -m o::- file1
[root@localhost tmp]# ls -l
total 8
drwxr-xr-x+ 2 root root 6 May  5 20:00 dir1
drwxr-xr-x. 2 root root 6 May  5 20:00 dir2
-rw-rw----+ 1 root root 0 May  5 20:00 file1
-rw-r--r--. 1 root root 0 May  5 20:00 file2

8. Remove the default permissions from dir1.

[root@localhost tmp]# setfacl --remove-default dir1
[root@localhost tmp]# getfacl dir1
# file: dir1
# owner: root
# group: root
user::rwx
group::r-x
other::r-x

9. Remove all ACLs on file1.

[root@localhost tmp]# setfacl --remove-all file1
[root@localhost tmp]# getfacl file1
# file: file1
# owner: root
# group: root
user::rw-
group::r--
other::---