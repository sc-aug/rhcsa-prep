#######
Exercise: Working with Systemd and Targets

1. Install the httpd package.

[root@localhost]# yum install httpd

2.* View all **active** targets on the system.

[root@localhost]# systemctl list-units --type=target

3.* View all targets installed on the disk.

[root@localhost]# systemctl list-units --type=target --all

4. Display the current default target.

[root@localhost]# systemctl get-default

5. Change the default target to the multi-user target if the multi-user target is available.

[root@localhost]#  systemctl list-units --type=target | grep multi-user.target
multi-user.target   loaded active active Multi-User System
[root@localhost]# systemctl set-default multi-user.target

6. View all available systemd configuration units.

[root@localhost]# systemctl -t help

7. Find the status of the sshd service.

[root@localhost]# systemctl status sshd.service

8. List all **active** service unit configuration files.

[root@localhost]# systemctl --type=service 
or
[root@localhost]# systemctl list-units --type=service

9. Determine if the httpd service is active.

[root@localhost]# systemctl is-active httpd

10. Determine if the httpd service is enabled, and, if it is not, enable it.

[root@localhost]# systemctl is-enabled httpd

11.* View enabled and disabled settings for all units of the type "service".

[root@localhost]# systemctl list-unit-files --type=service --all

12.* List all **service** unit configuration files (location), whether they are **active or not**.

[root@localhost]# systemctl list-units --all
OR
[root@localhost]# systemctl list-units --type=service --all

#######
Exercise: Recovering the Root Password

Interrupt the boot process to gain access to the system and reset the root password. Hint: You need to edit through the GRUB menu.

1. Start or reboot a system to get into the boot menu.

2. Press any key to stop the auto selection of a menu item.

3. Ensure the kernel you intend to boot into is highlighted and press the E key to edit the entry.

4. Navigate to the "linux16" kernel line and hit the End key to go to the end of the line.

5. Append rd.break to the linux16 kernel line.

6. Hit Ctrl + X to continue.

7. The system boots into an emergency mode that has the /sysroot directory mounted as read only.

8. Mount the /sysroot directory with read and write permissions.

mount -oremount, rw /sysroot
9. Switch into chroot jail and set the /sysroot as the root file system.

chroot /sysroot

10. Reset the root password.

passwd root

11. Clean up. Make sure that all unlabled files get relabeled during the boot process for SELinux.

touch /.autorelabel 

12. Exit chroot jail.

exit

13. Exit the initramfs debug shell.

exit

Troubleshooting Notes
    If the password did not change after reboot:
    The touch /.autorelabel command was missed or performed incorrectly.
    The file system was not mounted as read/write so the changes made were not persistent.

#######
Exercise: Interrupting the Boot Process to Change the Boot Target

1. Start or reboot a system to get to the boot menu.

2. Press any key to stop the auto selection of a GRUB item.

3. Ensure the kernel you intend to boot into is highlighted and press the E key to edit the entry.

4. Navigate to the "linux16" kernel line and hit the End key to go to the end of the line.

5. Append the new target to the linux16 kernel line.

systemd.unit=rescue.target

6. Continue booting into the system with Ctrl + X.

#######
Exercise: Powering Off Systems

1. Using the shutdown command, schedule a shutdown for five minutes from now and notify all users on the system of the shutdown.

[root@localhost]# shutdown +5 shutdown messages goes here

2. Using the shutdown command, reboot the machine immediately without delay.

[root@localhost]# shutdown -r now
[root@localhost]# shutdown -r 

3. Using systemctl, shutdown the system.

[root@localhost]# shutdown now 
or
[root@localhost]# shutdown +0 
Alternatively, not using the shutdown command:
[root@localhost]# init 0
[root@localhost]# systemctl halt

4. Schedule the system for a shutdown at 1:00 A.M. in the morning.

[root@localhost]# shutdown 01:00

5. Cancel the scheduled 1:00 A.M. shutdown.

[root@localhost]# shutdown -c

6. Using systemctl, reboot the the system.

[root@localhost]# systemctl reboot

7. Using any method of your choice, power off the system.

[root@localhost]# systemctl halt
[root@localhost]# systemctl poweroff
[root@localhost]# shutdown -P
[root@localhost]# init 0

#######
Exercise: Pgrep, pkill, kill and jobs

Part1

1. As the root user, create a job running in the background of your current terminal. Execute the script for that program process to be created.

[root@localhost]# (while true; do echo "My program" > ~/output.file; done) &

2. View the current jobs running in the background of your terminal.

[root@localhost ~]# jobs
[1]-  Running   ( while true; do< echo -n "My program" >> ~/output.file; done ) &

3. Stop the process from running, without killing the process, using the kill command.

[root@localhost]# kill -SIGSTOP %1 ### (%1 is the job number, if the job was 2 it would be %2)

4. View the stopped jobs in the background.

[root@localhost ~]# jobs
[1]+  Stopped     ( while true; do echo -n "My program" >> ~/output.file; done ) &

5. Start the process again using the kill command.

[root@localhost]# kill -SIGCONT %1

6. Kill the process without allowing any blocking of the kill command.

[root@localhost]# kill -SIGKILL %1

Part2

1. Download and install the httpd service.

[root@localhost]# yum install httpd

2. Start the httpd service (or ensure that it is running).

[root@localhost]# systemctl start httpd

3.* As the root user, grep for all processes that are running as the root user and display the process names.

[root@localhost]# pgrep -u root -l

4. As the `user` user, start the `vi` program at the terminal.

[user@localhost]# vi

5. As the `root` user, in your second terminal window, grep for all processes running under the user "user" and include the process names.

[root@localhost ~]# pgrep -u user -l
3690 dconf-service
3694 vim
...etc additional output cut off.

6. As the root user, grep for the "httpd" process.

[root@localhost]# pgrep httpd

7. As the root user, kill all of the "user" user's processes and boot that user from the system.

[root@localhost ~]# w
 14:15:59 up 20:55,  4 users,  load average: 0.00, 0.01, 0.05
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
user pts/0     Mon22    2:58m  0.05s  0.05s bash
[root@localhost ]# pkill -t pts/0 

This kills every process started from the user's terminal, but it does not boot the user. Now find all running processes left, which should either be Bash or SSH.

[root@localhost]# pgrep -u user
[root@localhost]# pkill -u user ssh

**boot** == remove ???

#######
Exercise: Nice, renice and ps

1. Ensure that you have the httpd package installed on the system.

[root@localhost]# yum install httpd

2. Ensure the httpd service is not running.

[root@localhost]# systemctl stop httpd

3. Start the httpd service with the most favorable nice possible.

[root@localhost]# nice -n -20 httpd

4. View the current nice of the httpd service using the ps command and grep command together.

[root@localhost]# ps axo pid,comm,nice | grep httpd 
or 
[root@localhost]# ps axo pid,comm,nice --sort=-nice | grep httpd 
This allows you to sort by nice level.

5. Renice all httpd processes and set the nice level to 0.

[root@localhost]# renice -n 0 $(pgrep httpd)

#######
Exercise: Monitoring and Calculating CPU Load Averages

1. View the system uptime and load average.

[root@localhost ~]# uptime
 09:53:07 up 16:32,  3 users,  load average: 1.02, 1.00, 0.69
2. View the system uptime and load average in such a way that it also shows what users are logged in to the system and what the user is doing.

[root@localhost ~]# w
 09:53:37 up 16:33,  3 users,  load average: 1.01, 1.00, 0.70
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
user  pts/1     09:18    1.00s  0.10s  5.32s /usr/libexec/gnome-terminal-server
3. Using the proc file system and wc, display the number of processors your system has. This is important to calculate the load average of the system.

[root@localhost]# grep "model name" /proc/cpuinfo | wc -l
4. Calculate the 1, 5, and 15 minute CPU load averages for the system.

There are two processes as a result of our previous command.

[root@localhost ~]# grep "model name" /proc/cpuinfo | wc -l
2

For each, processor 1 is 100%. If you have 1 processor and your load average is 1.2 then your load is greater than 100%. If you have 2 processors and your load is 2 then your load is 100%.

[root@localhost ~]# uptime
 09:42:20 up 16:21,  3 users,  load average: 1.04, 0.72, 0.35

Per CPU load average calculation formula: load average / # of cpu
Per CPU load average calculation 1 Minute load average: 1.04 / 2 = 52%
Per CPU load average calculation 5 Minute load average: .72 / 2 = 36%
Per CPU load average calculation 15 Minute load average: .35 / 2 = 17.5%

#######
Exercise: Working with top

Set up:
[root@localhost]# (while true; do echo -n "my program" >> /dev/null; done;) &

1. Start the top program.

[root@localhost]# top

2. The top program shows all running processes on the system but sorts them. Using your keyboard, browse up and down to view the processes.

Use the keyboard up and down arrows to navigate

3. Sort all processes by memory percentage.

Press "Shift" + "M"

4. Sort all processes by CPU usage.

Press "Shift" + "P"

5. Renice the process for the script started at the beginning of the exercise. The command is  "bash", as displayed in the top program. Set the nice level to -20.

Press the "R" key, enter the process id of the process you want to renice, and set the nice level.

6. Kill the bash script using top.

Press the "K" key and enter the process ID of the process you wish ti kill, then press enter.

#######
Exercise: Virtual Machines

1.* Download and install the proper packages to manage virtual machines on a Red Hat 7 machine. Ensure you install the GUI as well as the command line interface.

[root@localhost]# yum install virt-manager qemu-kvm qemu-img libvirt libvirt-python python-virtinst libvirt-client
or
[root@localhost]# yum grouplist hidden // This will show virtualization packages
[root@localhost]# yum groupinstall "Virtualization Client"
[root@localhost]# yum groupinstall "Virtualization Tools"
[root@localhost]# yum groupinstall "Virtualization Platform"
Note: This can prevent you from having to memorize packages or as a backup in the exam if you forget the packages required.

2. Ensure that the virtual machine services start when the system boots and is currently running.

[root@localhost]# systemctl start libvirtd
[root@localhost]# systemctl enable libvirtd
**Tip**: In the exam, if you have to start a service, ALWAYS enable the service. 

3. Create a CentOS-based virtual machine using the GUI.

[root@localhost]# virt-manager

4. Configure the virtual machine to auto start whenever the system starts.

[root@localhost]# virsh
[root@localhost]# virsh autostart vmname
or, at the virsh commandline:
virsh # autostart vmname

5. Reboot and test the configuration.

[root@localhost]# reboot